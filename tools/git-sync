#!/usr/bin/env python3

from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, Sequence, Sized, Union, Tuple, TypeVar
import sys
import argparse
import subprocess


# Parse command-line arguments
def parseArguments(defaults: Dict[str, str] = {}) -> Any:
  parser = argparse.ArgumentParser(description = 'Pull and push changes to all remote branches and delete redundant local branches.', formatter_class = argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-c', '--current-branches-only', action = "store_true", help = 'Synchronize currently checked out branches only.')
  parser.add_argument('-k', '--keep-local-branches', action = "store_true", help = 'Do not delete local branches which track non-existent remote branches.')
  return parser.parse_args()

# Fetch changes to all branches and rebase changes to the current branch
def retrieveChanges() -> None:
  subprocess.check_call(['git', 'fetch', '--all', '--prune'])
  subprocess.check_call(['git', 'rebase', 'FETCH_HEAD'])

# Publish changes to all branches
def publishChanges() -> None:
  subprocess.check_call(['git', 'push'])

# List branches by location or merge state
def listBranches(remote: bool = False, merged: bool = False) -> List[str]:
  command = ['git', 'branch'] + (['-r'] if remote else []) + (['--merged', 'master'] if merged else [])
  lines = subprocess.check_output(command).decode("utf-8").split('\n')
  if remote:
    branches = [line.strip().split('/', 1)[1] for line in lines if line and '->' not in line]
  else:
    branches = [line.strip() for line in lines if line]
    currentBranch = next((branch for branch in branches if branch.startswith('*')), None)
    if currentBranch:
      branches.remove(currentBranch)
      branches.insert(0, currentBranch[1:].strip())
  branches.remove('master')
  return branches

# List local branches which track remote branches
def listLocalTrackingBranches() -> List[str]:
  command = ['git', 'branch', '-lvv']
  lines = subprocess.check_output(command).decode("utf-8").split('\n')
  branches = []
  for line in lines:
    fields = line.strip().split()
    if len(fields) > 2:
      if fields[0] == '*':
        branches.append(fields[1])
      else:
        if fields[2].startswith('[') and (fields[2].endswith(']') or fields[2].endswith(':')):
          branches.append(fields[0])
  branches.remove('master')
  return branches

# Create local branches to track specified remote branches
def trackBranches(branches: List[str]) -> None:
  for branch in branches:
    subprocess.check_call(['git', 'branch', '-t', branch, 'origin/%s' % branch], stdout = subprocess.PIPE)
  if branches:
    print('Fetched remote branches:\n%s' % ''.join(['  %s\n' % branch for branch in branches]))

# Delete specified branches
def deleteBranches(branches: List[str]) -> None:
  for branch in branches:
    subprocess.check_call(['git', 'branch', '-D', branch], stdout = subprocess.PIPE)
  if branches:
    print('Deleted local branches:\n%s' % ''.join(['  %s\n' % branch for branch in branches]))

# Entry point
def main() -> int:
  settings = parseArguments()

  # Fetch changes and list branches
  retrieveChanges()
  localBranches = listBranches()
  remoteBranches = listBranches(remote = True)
  currentBranch = next(iter(localBranches), 'master')
  localTrackingBranches = listLocalTrackingBranches()

  # Checkout and track untracked remote branches
  if not settings.current_branches_only:
    newRemoteBranches = sorted(list(set(remoteBranches) - set(localBranches)))
    trackBranches(newRemoteBranches)

  # Delete local branches tracking non-existent remote branches
  if not settings.keep_local_branches:
    oldLocalBranches = list(set(localTrackingBranches) - set(remoteBranches) - set(currentBranch))
    deleteBranches(oldLocalBranches)

  # Publish changes to all branches
  publishChanges()
  return 0

if __name__ == "__main__":
  sys.exit(main())
