#!/usr/bin/env python3

from typing import Any, Callable, Dict, Generic, Iterable, List, Optional, Sequence, Sized, Union, Tuple, TypeVar
import sys
import argparse
import os
import os.path
import platform
import subprocess


# Parse command-line arguments
def parseArguments(defaults: Dict[str, str] = {}) -> Any:
  parser = argparse.ArgumentParser(description = 'Configure this repository clone for large files storage and simple synchronization.', formatter_class = argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-d', '--download-large-files', action = "store_true", help = 'Fetch large files from the remote repository.')
  return parser.parse_args()

# Determine script directory.
def findScriptDirectory() -> str:
  return os.path.dirname(os.path.realpath(__file__))

# Configure settings
def configureSettings() -> None:
  subprocess.check_call(['git', 'config', 'core.autocrlf', 'false'])
  subprocess.check_call(['git', 'config', 'pull.rebase', 'true'])
  subprocess.check_call(['git', 'config', 'branch.autosetupmerge', 'always'])
  subprocess.check_call(['git', 'config', 'branch.autosetuprebase', 'always'])
  print('Configured Git settings\n')

# Configure large files storage
def configureLargeFiles() -> None:
  subprocess.check_call(['git', 'lfs', 'install', '--local'])
  repositoryUrl = subprocess.check_output(['git', 'config', '--get', 'remote.origin.url']).decode("utf-8").strip()
  subprocess.check_call(['git', 'config', 'lfs.%s.git/info/lfs.locksverify' % repositoryUrl, 'true'])
  print('Configured git Large Files Storage\n')

# Fetch and checkout large files
def downloadLargeFiles() -> None:
  subprocess.check_call(['git', 'lfs', 'fetch'])
  subprocess.check_call(['git', 'lfs', 'checkout'])

# Configure aliases
def configureAliases(scriptDirectory: str) -> None:
  print('Added Git command aliases:')
  python_version = '3' if platform.system().lower() == 'linux' else ''
  subprocess.check_call(['git', 'config', 'alias.sync', '!python%s %s $@' % (python_version, os.path.join(scriptDirectory, 'git-sync').replace('\\', '\\\\'))], stdout = subprocess.PIPE)
  print('* sync - Pull, rebase & push changes to all branches making the local and remote repository contents identical.')

  subprocess.check_call(['git', 'config', 'alias.createbranch', '!git checkout -b $1 && git push --set-upstream origin $1 && echo >/dev/null'], stdout = subprocess.PIPE)
  print('* createbranch - Create a branch and push its tracked remote branch.')

  subprocess.check_call(['git', 'config', 'alias.deletebranch', '!git push origin --delete $1 && git branch -d $1 && echo >/dev/null'], stdout = subprocess.PIPE)
  print('* deletebranch - Delete a branch and its tracked remote branch.')

  subprocess.check_call(['git', 'config', 'alias.lastmerge', '!BRANCH=`git rev-parse --abbrev-ref HEAD` && echo ${BRANCH} && git pull --rebase && git checkout $1 && git pull --rebase && git checkout ${BRANCH} && git merge --no-edit $1 && git push && echo >/dev/null'], stdout = subprocess.PIPE)
  print('* lastmerge - Merge a latest revision of a branch into the current branch.')

  subprocess.check_call(['git', 'config', 'alias.blankmerge', 'merge -s ours --no-edit'], stdout = subprocess.PIPE)
  print('* blankmerge - Merge a branch without applying any changes into the current branch.')

  subprocess.check_call(['git', 'config', 'alias.amend', 'commit --amend -C HEAD'], stdout = subprocess.PIPE)
  print('* amend - Combine staged changes with the last commit.')

  subprocess.check_call(['git', 'config', 'alias.glog', 'log --all --graph --stat --pretty=format:\'%C(ul red)%h%C(reset) -%C(yellow)%d%C(reset) %C(cyan)%s%C(reset) %C(bold blue)<%an>%C(reset) %C(magenta)(%cr)%C(reset)\' --abbrev-commit'], stdout = subprocess.PIPE)
  print('* glog - Commit log for all branches as a graph.')

  subprocess.check_call(['git', 'config', 'alias.blog', '!git log $(git merge-base master $(git rev-parse --abbrev-ref HEAD))..HEAD $@'], stdout = subprocess.PIPE)
  print('* blog - Commit log for specified branch only.')
  print('')

# Entry point
def main() -> int:
  settings = parseArguments()

  # Change to repository directory
  scriptDirectory = findScriptDirectory()
  os.chdir(os.path.dirname(scriptDirectory))

  # Update local Git configuration
  configureSettings()
  configureLargeFiles()
  if settings.download_large_files:
    downloadLargeFiles()
  configureAliases(scriptDirectory)
  return 0

if __name__ == "__main__":
  sys.exit(main())
