# Compressed copy of the default Akka reference.conf to avoid classloading conflicts
akka {
  version = "2.8.0"
  home = ""
  loggers = ["akka.event.Logging$DefaultLogger"]
  logging-filter = "akka.event.DefaultLoggingFilter"
  loggers-dispatcher = "akka.actor.default-dispatcher"
  logger-startup-timeout = 5s
  loglevel = "INFO"
  stdout-loglevel = "WARNING"
  log-config-on-start = off
  log-dead-letters = 10
  log-dead-letters-during-shutdown = off
  log-dead-letters-suspend-duration = 5 minutes
  library-extensions = ${?akka.library-extensions} ["akka.serialization.SerializationExtension$"]
  extensions = []
  daemonic = off
  jvm-exit-on-fatal-error = on
  jvm-shutdown-hooks = on
  fail-mixed-versions = on
  java-flight-recorder {
    enabled = true
  }
  actor {
    provider = "local"
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"
    creation-timeout = 20s
    serialize-messages = off
    serialize-creators = off
    no-serialization-verification-needed-class-prefix = ["akka."]
    unstarted-push-timeout = 10s
    typed {
      timeout = 5s
    }
    router.type-mapping {
      from-code = "akka.routing.NoRouter"
      round-robin-pool = "akka.routing.RoundRobinPool"
      round-robin-group = "akka.routing.RoundRobinGroup"
      random-pool = "akka.routing.RandomPool"
      random-group = "akka.routing.RandomGroup"
      balancing-pool = "akka.routing.BalancingPool"
      smallest-mailbox-pool = "akka.routing.SmallestMailboxPool"
      broadcast-pool = "akka.routing.BroadcastPool"
      broadcast-group = "akka.routing.BroadcastGroup"
      scatter-gather-pool = "akka.routing.ScatterGatherFirstCompletedPool"
      scatter-gather-group = "akka.routing.ScatterGatherFirstCompletedGroup"
      tail-chopping-pool = "akka.routing.TailChoppingPool"
      tail-chopping-group = "akka.routing.TailChoppingGroup"
      consistent-hashing-pool = "akka.routing.ConsistentHashingPool"
      consistent-hashing-group = "akka.routing.ConsistentHashingGroup"
    }
    deployment {
      default {
        dispatcher = ""
        mailbox = ""
        router = "from-code"
        nr-of-instances = 1
        within = 5 seconds
        virtual-nodes-factor = 10
        tail-chopping-router {
          interval = 10 milliseconds
        }
        routees {
          paths = []
        }
        resizer {
          enabled = off
          lower-bound = 1
          upper-bound = 10
          pressure-threshold = 1
          rampup-rate = 0.2
          backoff-threshold = 0.3
          backoff-rate = 0.1
          messages-per-resize = 10
        }
        optimal-size-exploring-resizer {
          enabled = off
          lower-bound = 1
          upper-bound = 10
          chance-of-ramping-down-when-full = 0.2
          action-interval = 5s
          downsize-after-underutilized-for = 72h
          explore-step-size = 0.1
          chance-of-exploration = 0.4
          downsize-ratio = 0.8
          optimization-range = 16
          weight-of-latest-metric = 0.5
        }
      }
      "/IO-DNS/inet-address" {
        mailbox = "unbounded"
        router = "consistent-hashing-pool"
        nr-of-instances = 4
      }
      "/IO-DNS/inet-address/*" {
        dispatcher = "akka.actor.default-blocking-io-dispatcher"
      }
      "/IO-DNS/async-dns" {
        mailbox = "unbounded"
        router = "round-robin-pool"
        nr-of-instances = 1
      }
    }
    default-dispatcher {
      type = "Dispatcher"
      executor = "default-executor"
      default-executor {
        fallback = "fork-join-executor"
      }
      affinity-pool-executor {
        parallelism-min = 4
        parallelism-factor = 0.8
        parallelism-max = 64
        task-queue-size = 512
        rejection-handler = "akka.dispatch.affinity.ThrowOnOverflowRejectionHandler"
        idle-cpu-level = 5
        queue-selector = "akka.dispatch.affinity.FairDistributionHashCache"
        fair-work-distribution {
          threshold = 128
        }
      }
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 1.0
        parallelism-max = 64
        task-peeking-mode = "FIFO"
      }
      thread-pool-executor {
        keep-alive-time = 60s
        fixed-pool-size = off
        core-pool-size-min = 8
        core-pool-size-factor = 3.0
        core-pool-size-max = 64
        max-pool-size-min = 8
        max-pool-size-factor  = 3.0
        max-pool-size-max = 64
        task-queue-size = -1
        task-queue-type = "linked"
        allow-core-timeout = on
      }
      shutdown-timeout = 1s
      throughput = 5
      throughput-deadline-time = 0ms
      attempt-teamwork = on
      mailbox-requirement = ""
    }
    internal-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      throughput = 5
      fork-join-executor {
        parallelism-min = 4
        parallelism-factor = 1.0
        parallelism-max = 64
      }
    }
    default-blocking-io-dispatcher {
      type = "Dispatcher"
      executor = "thread-pool-executor"
      throughput = 1
      thread-pool-executor {
        fixed-pool-size = 16
      }
    }
    default-mailbox {
      mailbox-type = "akka.dispatch.UnboundedMailbox"
      mailbox-capacity = 1000
      mailbox-push-timeout-time = 10s
      stash-capacity = -1
    }
    mailbox {
      requirements {
        "akka.dispatch.UnboundedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-queue-based
        "akka.dispatch.BoundedMessageQueueSemantics" =
          akka.actor.mailbox.bounded-queue-based
        "akka.dispatch.DequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-deque-based
        "akka.dispatch.UnboundedDequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-deque-based
        "akka.dispatch.BoundedDequeBasedMessageQueueSemantics" =
          akka.actor.mailbox.bounded-deque-based
        "akka.dispatch.MultipleConsumerSemantics" =
          akka.actor.mailbox.unbounded-queue-based
        "akka.dispatch.ControlAwareMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-control-aware-queue-based
        "akka.dispatch.UnboundedControlAwareMessageQueueSemantics" =
          akka.actor.mailbox.unbounded-control-aware-queue-based
        "akka.dispatch.BoundedControlAwareMessageQueueSemantics" =
          akka.actor.mailbox.bounded-control-aware-queue-based
        "akka.event.LoggerMessageQueueSemantics" =
          akka.actor.mailbox.logger-queue
      }
      unbounded-queue-based {
        mailbox-type = "akka.dispatch.UnboundedMailbox"
      }
      bounded-queue-based {
        mailbox-type = "akka.dispatch.BoundedMailbox"
      }
      unbounded-deque-based {
        mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
      }
      bounded-deque-based {
        mailbox-type = "akka.dispatch.BoundedDequeBasedMailbox"
      }
      unbounded-control-aware-queue-based {
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
      }
      bounded-control-aware-queue-based {
        mailbox-type = "akka.dispatch.BoundedControlAwareMailbox"
      }
      logger-queue {
        mailbox-type = "akka.event.LoggerMailboxType"
      }
    }
    debug {
      receive = off
      autoreceive = off
      lifecycle = off
      fsm = off
      event-stream = off
      unhandled = off
      router-misconfiguration = off
    }
    allow-java-serialization = off
    warn-about-java-serializer-usage = on
    warn-on-no-serialization-verification = on
    serializers {
      java = "akka.serialization.JavaSerializer"
      bytes = "akka.serialization.ByteArraySerializer"
      primitive-long = "akka.serialization.LongSerializer"
      primitive-int = "akka.serialization.IntSerializer"
      primitive-string = "akka.serialization.StringSerializer"
      primitive-bytestring = "akka.serialization.ByteStringSerializer"
      primitive-boolean = "akka.serialization.BooleanSerializer"
    }
    serialization-bindings {
      "[B" = bytes
      "java.io.Serializable" = java
      "java.lang.String" = primitive-string
      "akka.util.ByteString$ByteString1C" = primitive-bytestring
      "akka.util.ByteString$ByteString1" = primitive-bytestring
      "akka.util.ByteString$ByteStrings" = primitive-bytestring
      "java.lang.Long" = primitive-long
      "scala.Long" = primitive-long
      "java.lang.Integer" = primitive-int
      "scala.Int" = primitive-int
      "java.lang.Boolean" = primitive-boolean
      "scala.Boolean" = primitive-boolean
    }
    serialization-identifiers {
      "akka.serialization.JavaSerializer" = 1
      "akka.serialization.ByteArraySerializer" = 4
      primitive-long = 18
      primitive-int = 19
      primitive-string = 20
      primitive-bytestring = 21
      primitive-boolean = 35
    }
  }

  serialization.protobuf {
    whitelist-class = [
      "com.google.protobuf.GeneratedMessage",
      "com.google.protobuf.GeneratedMessageV3",
      "scalapb.GeneratedMessageCompanion",
      "akka.protobufv3.internal.GeneratedMessageV3"
    ]
    allowed-classes = ${akka.serialization.protobuf.whitelist-class}
  }
  scheduler {
    tick-duration = 10ms
    ticks-per-wheel = 512
    implementation = akka.actor.LightArrayRevolverScheduler
    shutdown-timeout = 5s
  }
  scheduled-clock-interval = 1 s
  io {
    pinned-dispatcher {
      type = "PinnedDispatcher"
      executor = "thread-pool-executor"
      thread-pool-executor.allow-core-timeout = off
    }
    tcp {
      nr-of-selectors = 1
      max-channels = 256000
      selector-association-retries = 10
      batch-accept-limit = 10
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      register-timeout = 5s
      max-received-message-size = unlimited
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.internal-dispatcher"
      management-dispatcher = "akka.actor.internal-dispatcher"
      file-io-dispatcher = "akka.actor.default-blocking-io-dispatcher"
      file-io-transferTo-limit = 512 KiB
      finish-connect-retries = 5
      windows-connection-abort-workaround-enabled = off
    }
    udp {
      nr-of-selectors = 1
      max-channels = 4096
      select-timeout = infinite
      selector-association-retries = 10
      receive-throughput = 3
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.internal-dispatcher"
      management-dispatcher = "akka.actor.internal-dispatcher"
    }
    udp-connected {
      nr-of-selectors = 1
      max-channels = 4096
      select-timeout = infinite
      selector-association-retries = 10
      receive-throughput = 3
      direct-buffer-size = 128 KiB
      direct-buffer-pool-limit = 1000
      trace-logging = off
      selector-dispatcher = "akka.io.pinned-dispatcher"
      worker-dispatcher = "akka.actor.internal-dispatcher"
      management-dispatcher = "akka.actor.internal-dispatcher"
    }
    dns {
      dispatcher = "akka.actor.internal-dispatcher"
      resolver = "inet-address"
      inet-address {
        provider-object = "akka.io.InetAddressDnsProvider"
        positive-ttl = default
        negative-ttl = default
        cache-cleanup-interval = 120s
      }
      async-dns {
        provider-object = "akka.io.dns.internal.AsyncDnsProvider"
        positive-ttl = forever
        negative-ttl = never
        nameservers = default
        resolve-timeout = 5s
        cache-cleanup-interval = 120s
        search-domains = default
        ndots = default
      }
    }
  }
  coordinated-shutdown {
    default-phase-timeout = 5 s
    terminate-actor-system = on
    exit-jvm = off
    exit-code = 0
    run-by-jvm-shutdown-hook = on
    run-by-actor-system-terminate = on
    reason-overrides {
      "akka.actor.CoordinatedShutdown$ClusterDowningReason$" {
        exit-code = -1
      }
      "akka.actor.CoordinatedShutdown$ClusterJoinUnsuccessfulReason$" {
        exit-code = -1
      }
    }
    phases {
      before-service-unbind {
      }
      service-unbind {
        depends-on = [before-service-unbind]
      }
      service-requests-done {
        depends-on = [service-unbind]
      }
      service-stop {
        depends-on = [service-requests-done]
      }
      before-cluster-shutdown {
        depends-on = [service-stop]
      }
      cluster-sharding-shutdown-region {
        timeout = 10 s
        depends-on = [before-cluster-shutdown]
      }
      cluster-leave {
        depends-on = [cluster-sharding-shutdown-region]
      }
      cluster-exiting {
        timeout = 10 s
        depends-on = [cluster-leave]
      }
      cluster-exiting-done {
        depends-on = [cluster-exiting]
      }
      cluster-shutdown {
        depends-on = [cluster-exiting-done]
      }
      before-actor-system-terminate {
        depends-on = [cluster-shutdown]
      }
      actor-system-terminate {
        timeout = 10 s
        depends-on = [before-actor-system-terminate]
      }
    }
  }
  circuit-breaker {
    default {
      max-failures = 10
      call-timeout = 10s
      reset-timeout = 15s
      max-reset-timeout = 36500d
      exponential-backoff = 1.0
      random-factor = 0.0
      exception-allowlist = []
    }
  }
}
